networks:
  my-net:
    driver: bridge

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-server
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: leetclone
    ports:
      - "3306:3306"
    volumes:
      - ./backend/dbBackup/leetclone.sql:/docker-entrypoint-initdb.d/01-leetclone.sql
    networks:
      - my-net

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      - my-net

  socket:
    build:
      context: ./socket/
      dockerfile: Dockerfile
    container_name: socket_server
    ports:
      - 3001:3001
    networks:
      - my-net

  worker:
    build:
      context: ./bunWorker/
      dockerfile: Dockerfile
    ports:
      - 3002:3002
    networks:
      - my-net

  # Development frontend service
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-dev
    container_name: frontend_dev_server
    ports:
      - 5173:5173  # Frontend Vite dev server
    volumes:
      - ./frontend:/usr/app/frontend  # Bind mount frontend
      - /usr/app/frontend/node_modules  # Preserve node_modules
    environment:
      - NODE_ENV=development
    networks:
      - my-net

  # Development backend service
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-dev
    container_name: backend_dev_server
    ports:
      - 3000:3000   # Backend Express server
    volumes:
      - ./backend:/usr/app/backend    # Bind mount backend
      - /usr/app/backend/node_modules   # Preserve node_modules
    environment:
      - NODE_ENV=development
    networks:
      - my-net

  # Production service
  express:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: express_server
    ports:
      - 80:3000
      - 443:3000
      - 3000:3000
    networks:
      - my-net